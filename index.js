// Importa as dependÃªncias necessÃ¡rias
const { Client, GatewayIntentBits, REST, Routes, Collection, MessageActionRow, MessageButton } = require('discord.js');
const fs = require('fs');
require('dotenv').config();

const TOKEN = process.env.TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;

// Inicializa o cliente do Discord
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers,GatewayIntentBits.GuildMessages,GatewayIntentBits.MessageContent] });

client.pendingTpRequests = new Map();

// Carrega os comandos dinamicamente
client.commands = new Collection();
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
  const command = require(`./commands/${file}`);
  client.commands.set(command.data.name, command);
}

// Registro de comandos na API do Discord
const rest = new REST({ version: '10' }).setToken(TOKEN);

(async () => {
  try {
    console.log('ðŸ”„ Removendo comandos antigos...');
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: [] });
    console.log('âœ… Comandos antigos removidos.');

    console.log('ðŸ”„ Registrando novos comandos...');
    const commands = client.commands.map(cmd => cmd.data.toJSON());
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    console.log('âœ… Novos comandos registrados com sucesso!');
  } catch (error) {
    console.error('Erro ao atualizar comandos:', error);
  }
})();

// Listener para quando o bot estiver pronto
client.once('ready', () => {
  console.log(`ðŸ¤– Bot conectado como ${client.user.tag}`);
});
// Listener para interaÃ§Ãµes de comandos
client.on('interactionCreate', async interaction => {
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;

    console.log(`Comando executado: /${interaction.commandName} por ${interaction.user.tag} no servidor ${interaction.guild?.name || 'DM'}`);
    try {
      await command.execute(interaction);
    } catch (error) {
      console.error(`Erro ao executar o comando ${interaction.commandName}:`, error);
      await interaction.reply({ content: 'Houve um erro ao executar este comando.', ephemeral: true });
    }
  }

  // Captura interaÃ§Ãµes de botÃµes (aceitar ou recusar o teleporte)
  if (interaction.isButton()) {
    if (interaction.customId === 'tpaccept') {
      const destinoId = interaction.user.id;
      if (!client.pendingTpRequests.has(destinoId)) {
        return;
      }

      const origemId = client.pendingTpRequests.get(destinoId);
      const origem = await client.users.fetch(origemId);

      // Aqui vocÃª implementaria a lÃ³gica de teleporte para o jogador 'origem'

      await origem.send(`${interaction.user.username} aceitou seu pedido de teleporte!`);
      await interaction.reply(`VocÃª aceitou o pedido de teleporte de ${origem.username}.`);

      // Remove o pedido de teleportaÃ§Ã£o
      client.pendingTpRequests.delete(destinoId);
    }

    if (interaction.customId === 'tpdeny') {
      const destinoId = interaction.user.id;
      if (!client.pendingTpRequests.has(destinoId)) {
        return;
      }

      const origemId = client.pendingTpRequests.get(destinoId);
      const origem = await client.users.fetch(origemId);

      await origem.send(`${interaction.user.username} recusou seu pedido de teleporte.`);
      await interaction.reply(`VocÃª recusou o pedido de teleporte de ${origem.username}.`);

      // Remove o pedido de teleportaÃ§Ã£o
      client.pendingTpRequests.delete(destinoId);
    }
  }
});

const randomResponses = [
  "se estÃ¡ usando wlib, sim!",
  "nÃ£o",
  "sim",
  "pergunte novamente mais tarde",
  "sei la pohakkkkkkk",
  "serÃ¡?",
  "?",
  "depende, tu tem coragem?",
  "ta querendo saber demais, parÃ§a",
  "hmm... sÃ³ amanhÃ£",
  "sim kkkkkkkkkkkkk",
  "acho que nÃ£o",
  "tenho cara de orÃ¡culo por acaso?",
  "poha, pergunta pra tua mÃ£e",
  "seria possÃ­vel?",
  "tenta e descobre",
  "sÃ³ deus sabe",
  "nÃ£o faÃ§o ideia, parÃ§a",
  "talvez",
  "quem sabe?",
  "por que vocÃª tÃ¡ me perguntando isso?",
  "tanto faz",
  "certeza absoluta que nÃ£o",
  "certeza absoluta que sim",
  "depende, tÃ¡ na chuva?",
  "chama o scooby-doo pra resolver",
  "nunca saberemos...",
  "tu que sabe",
  "se for quarta-feira, sim",
  "nÃ£o conte comigo pra isso",
  "kkk me diz vc",
  "descubra",
  "nÃ£o agora, depois",
  "tu decide, vai",
  "hmmmmm sim",
  "ainda nÃ£o",
  "claro que nÃ£o, animal",
  "tem certeza que quer saber?",
  "Ã© meio relativo, nÃ©?",
  "sei lÃ¡",
  "nem quero saber",
  "por mim tÃ¡ tudo certo",
  "nÃ£o posso te dizer",
  "deixa quieto",
  "dÃ¡ um google aÃ­",
  "sÃ³ se tu quiser",
  "nÃ£o tenho certeza",
  "certeza que sim",
  "certeza que nÃ£o",
  "nÃ£o posso afirmar",
  "vai com calma aÃ­",
  "dormindo, pergunta depois",
  "por favor, outra pergunta",
  "nÃ£o me pergunte isso",
  "confia no processo",
  "o destino vai dizer",
  "depende, Ã© pra matar aula?",
  "sÃ³ amanhÃ£",
  "me poupe",
  "nÃ£o agora, to ocupado",
  "essa Ã© fÃ¡cil: nÃ£o",
  "essa Ã© fÃ¡cil: sim",
  "nÃ£o hoje, mas talvez amanhÃ£",
  "eu diria que sim",
  "eu diria que nÃ£o",
  "olha... complicado, hein?",
  "o que vc acha?",
  "vc que lute",
  "nÃ£o to a fim de responder",
  "sÃ³ se for pizza",
  "kkkkk talvez nÃ£o",
  "talvez sim, talvez nÃ£o",
  "por enquanto nÃ£o",
  "nÃ£o posso prometer nada",
  "preciso pensar melhor",
  "hmm, deixa pra lÃ¡",
  "to com preguiÃ§a de responder",
  "depende da sorte",
  "sÃ³ se tiver cafÃ©",
  "sÃ³ se for agora",
  "nem adianta perguntar",
  "nÃ£o entendi, mas tÃ¡ tudo bem",
  "pergunta no google",
  "kkk tÃ¡ achando o quÃª?",
  "nÃ£o vou te responder",
  "fala sÃ©rio, nÃ©?",
  "vai nessa que tu descobre",
  "tenta a sorte",
  "nÃ£o sou teu pai, mas sim",
  "nÃ£o sou teu pai, mas nÃ£o",
  "nÃ£o tenho palavras",
  "tem certeza disso?",
  "confia, sim",
  "confia, nÃ£o",
  "talvez mais tarde",
  "quem liga?",
  "deixa o tempo responder",
  "tÃ¡ me zoando, nÃ©?",
  "hoje nÃ£o, mas tenta amanhÃ£",
  "isso Ã© segredo",
  "claro que sim, sÃ³ que nÃ£o",
  "nÃ£o confio nessa pergunta",
  "tu sabe a resposta, nÃ©?",
  "pode ser, mas e se nÃ£o for?",
  "a resposta tÃ¡ dentro de vocÃª",
  "ai ai... complicado",
  "se o universo quiser, sim",
  "se o universo quiser, nÃ£o",
  "Ã© por isso que te amo",
  "isso nÃ£o faz sentido",
  "sÃ³ se chover",
  "sÃ³ se parar de chover",
  "um dia quem sabe",
  "kkkkkk pergunta besta",
  "nÃ£o tem como saber",
  "nÃ£o conte comigo",
  "serÃ¡ que sim?",
  "serÃ¡ que nÃ£o?",
  "nÃ£o vou opinar",
  "deixa pra lÃ¡",
  "muito difÃ­cil essa",
  "relaxa e deixa rolar",
  "quem sou eu pra dizer?",
  "se vc quiser, sim",
  "Ã© o que dizem por aÃ­",
  "nÃ£o to com cabeÃ§a pra isso",
  "por mim tÃ¡ Ã³timo",
  "olha... talvez nÃ£o",
  "Ã© complicado, sabe?",
  "nem te conto",
  "sim... ou nÃ£o",
  "kkkkkk ai meu deus",
  "pergunta difÃ­cil, hein?",
  "quem te contou isso?",
  "nÃ£o vou falar nada",
  "sim, mas sÃ³ hoje",
  "nÃ£o, mas amanhÃ£ talvez",
  "me chama depois pra isso",
  "fala com o suporte",
  "desisto de responder",
  "sÃ³ pode ser brincadeira",
  "essa eu nÃ£o sei",
  "essa eu nÃ£o respondo",
  "vc sabe que sim",
  "vc sabe que nÃ£o",
  "serÃ¡ que vale a pena?",
  "vou pensar no seu caso",
  "pode deixar, eu resolvo",
  "nÃ£o to com tempo pra isso",
  "tÃ¡ achando que sou quem?",
  "isso Ã© confidencial",
  "dorme e acorda amanhÃ£",
  "simplesmente nÃ£o sei",
  "isso Ã© tÃ£o aleatÃ³rio",
  "Ã© sÃ©rio isso?",
  "kkk quem liga?",
  "foca em outra coisa",
  "nÃ£o rola",
  "se tu tÃ¡ achando que sim, entÃ£o Ã©",
  "quer saber mesmo? nÃ£o",
  "quer saber mesmo? sim",
  "ai que preguiÃ§a",
  "talvez um dia",
  "simplesmente sim",
  "simplesmente nÃ£o",
  "um grande talvez",
  "nÃ£o posso ajudar nisso",
  "tu que lute pra descobrir",
  "Ã© isso aÃ­ mesmo",
  "sim, mas depende",
  "nÃ£o, mas depende",
  "vc tÃ¡ tentando me testar?",
  "ai ai... pergunta de novo",
  "tÃ¡ querendo muito, nÃ©?",
  "nÃ£o to com paciÃªncia",
  "nÃ£o posso te dizer agora",
  "sim, vai nessa",
];

const randomUserIds = [
  '335024452742152204', // Substitua por IDs reais de usuÃ¡rios
  '561051867191443477', // Substitua por IDs reais de usuÃ¡rios
  '685562331350040605',
  '261936490702045186',
  '288448920949096458',// Substitua por IDs reais de usuÃ¡rios
];

// Evento de mensagens
client.on("messageCreate", (message) => {
  // Ignora mensagens de bots
  if (message.author.bot) return;

  // Verifica se a mensagem termina com "?" e tem 20% de chance de responder
  if ((message.content.trim().endsWith("?") && (Math.random() < 0.4)) || (message.content.trim().endsWith("?") && message.mentions.has(client.user))) {
    const randomResponse =
      randomResponses[Math.floor(Math.random() * randomResponses.length)];
    message.reply(randomResponse).catch(console.error);
  }

  if (randomUserIds.includes(message.author.id) && Math.random() < 0.2) {
    message.reply("*- disse a putinha*").catch(console.error);
  }
});

// Login do bot
client.login(TOKEN).catch(err => {
  console.error('Erro ao conectar o bot:', err);
});
